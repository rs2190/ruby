# オーバーライドしたBusクラスのメソッド内からCarクラスを呼び出すこともできるんです！
# 呼び出すには、「super」を使います。

# superとは
# 「super」は、子クラスのメソッド内で定義すると、親クラス内にある同じ名前のメソッドを呼び出すことができます。
# 文章のみではわかりにくいので、実際にコードを見てみましょう。


class Car

  def run(distance)
    puts "車で#{distance}キロ走ります。"
  end

end


# 書き方としてはメソッド内に「super」と定義するだけです。
# 「走る」という動作は、どの車にも共通している要素かと思います。
# 一方で、2行目の「30人を乗せて、走っている」というのは、バスなどの大型車にしかない要素と言えます。
# このように、親クラスのメソッドにはない要素を追加したい時などに使用します。

class Bus < Car

  def run(distance)
    super
     puts "30人も乗せて、走ってます。"
  end

end

# Busクラスのrunメソッドを見てみましょう。
# 1行目に「super」を記述しているのでCarクラスに定義されている
# 「車で5キロ走ります。」が出力されています。
# 2行目に記述されている「30人が乗って、走っています。」も続けて出力されていますね。

bus = Bus.new
bus.run(5)

# オーバーライドとは
# 継承を行った「親子関係」であるクラスでは、メソッドを上書きできる
# 親クラスで定義されたメソッド名と同じメソッド名を子クラスで定義し、メソッド内の処理を上書きすることを「オーバーライド」と言う
# 親クラスのメソッドの中身が書き換えられるわけではなく、子クラス内で呼び出した時のみ、上書きされている
# 親クラスのメソッドだけでは、実現したい機能が満たせず、子クラスで機能を追加したい場合などに利用
# オーバーライドのメリット
# 似ている機能を1つのメソッド名に合わせて、それぞれの子クラスで適した処理を定義する事ができる
# superとは
# 子クラスのメソッド内で定義すると、親クラス内にある同じ名前のメソッドを呼び出すことができる
# superの書き方は、メソッド内に「super」と定義するのみ
